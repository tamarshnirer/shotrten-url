name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: docker build -t test-image .

      - name: Run Docker Container
        run: docker run --rm -d -p 8000:8000 --name test-container test-image

      - name: Install Dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt
          pip3 install pytest

      - name: Run Tests
        run: |
          RUNNING_STATE=$(docker inspect -f '{{.State.Running}}' test-container)
          echo "Container state: $RUNNING_STATE"
          if [ "$RUNNING_STATE" == "true" ]; then
            echo "Container is running."
          else
            echo "Container is not running."
            exit 1
          fi
          python3 -m pytest tests.py
          docker stop test-container

      - name: Fetch Latest Tag
        id: fetch_tag
        run: |
          tags=$(curl -s "https://hub.docker.com/v2/repositories/tamarshnirer/shorten-url/tags/?page_size=100" | jq -r '.results[].name' | sort -V)
          latest_tag=$(echo "$tags" | tail -n 1)
          echo "LATEST_TAG=${latest_tag}" >> $GITHUB_ENV
          echo "Latest tag: $latest_tag"

      - name: Bump Version
        id: bump_version
        run: |
          current_version="${{ env.LATEST_TAG }}"
          IFS='.' read -r -a version_parts <<< "$current_version"
          if [ ${#version_parts[@]} -lt 3 ]; then
            version_parts[1]=0
            version_parts[2]=$((version_parts[0] + 1))
          else
            version_parts[2]=$((version_parts[2] + 1))
          fi
          new_version="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
          echo "NEW_VERSION=${new_version}" >> $GITHUB_ENV
          echo "Current TAG: $current_version"
          echo "New Version: $new_version"

      - name: Sanitize new_version  
        run: |
          sanitized_version=$(echo "${{ env.NEW_VERSION }}" | tr -cd '[:alnum:].-_')
          sanitized_version=$(echo "$sanitized_version" | sed 's/^[.-]*//;s/[.-]*$//')
          echo "$sanitized_version"
          echo "Renaming image to tamarshnirer/shorten-url:$sanitized_version"
          docker tag test-image tamarshnirer/shorten-url:${sanitized_version}

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: tamarshnirer
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Image with New Tag
        run: docker push tamarshnirer/shorten-url:${{ env.SANITIZED_NEW_VERSION }}

      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          repository: tamarshnirer/example-gitops
          token: ${{ secrets.TARGET_REPO_TOKEN }}
          path: example-gitops

      - name: Update Deployment File
        run: |
          cd example-gitops
          NEW_IMAGE="tamarshnirer/shorten-url:${{ env.SANITIZED_NEW_VERSION }}"
          sed -i "s|image: .*|image: ${NEW_IMAGE}|" shorten-url-dep.yaml
          cat shorten-url-dep.yaml

      - name: Commit and Push Changes
        run: |
          cd example-gitops
          git config user.name 'github-actions'
          git config user.email 'actions@github.com'
          git add shorten-url-dep.yaml
          git status
          git commit -m 'Update deployment image' || echo "No changes to commit"
          git push origin main
